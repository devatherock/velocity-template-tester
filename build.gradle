plugins {
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id "org.jetbrains.kotlin.kapt" version "1.9.24"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.9.24"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'application'
    id 'groovy'
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.diffplug.spotless' version '6.25.0'
}

version "0.9.0"
group "io.github.devatherock"

repositories {
    mavenCentral()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly

    // Force dependency versions to use dependencies without vulnerabilities
    all {
        resolutionStrategy {
            force 'org.jsoup:jsoup:1.17.2'
        }
    }
}

dependencies {
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt "io.micronaut.openapi:micronaut-openapi"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    implementation "io.micronaut:micronaut-runtime"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    implementation "io.micronaut:micronaut-management"

    implementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.3'
    implementation group: 'org.apache.velocity.tools', name: 'velocity-tools-generic', version: '3.1'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'

    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.17.1"
    runtimeOnly "ch.qos.logback:logback-classic:1.5.6"

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut:micronaut-http-client"

    testImplementation group: 'org.codehaus.groovy', name: 'groovy-json', version: '3.0.21'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-3.0'
}

test.classpath += configurations.developmentOnly

mainClassName = "io.github.devatherock.velocity.tester.Application"

tasks.withType(Test) {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        // Will retain parameter names for Java reflection
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-XshowSettings:vm')
    systemProperties(System.properties)
}

ext.jacoco = [
    exclusions: [
        'io/github/devatherock/velocity/tester/Application.class',
        'io/github/devatherock/velocity/tester/util/VelocityUtil.class'
    ],
    coverageThresholds: [
        'io.github.devatherock.velocity.tester.controller.VelocityController': [
            'BRANCH': 0.50,
            'COMPLEXITY': 0.50,
            'INSTRUCTION': 0.81
        ],
        'io.github.devatherock.velocity.tester.util.VelocityUtil.Companion': [
            'BRANCH': 0.90,
            'COMPLEXITY': 0.83,
            'INSTRUCTION': 0.95
        ],
        'io.github.devatherock.velocity.tester.model.ExpandTemplateRequest': [
            'BRANCH': 0.50,
            'COMPLEXITY': 0.80,
            'INSTRUCTION': 0.78
        ]
    ]
]

apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/integration.gradle"
apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/checks.gradle"

/**
 * Fetches the value of a gradle property
 *
 * @param propertyName
 * @param propertyValueDefault
 * @return the property value
 */
String getPropertyValue(String propertyName, String propertyValueDefault = null) {
    return project.hasProperty(propertyName) ? project[propertyName] : propertyValueDefault
}
